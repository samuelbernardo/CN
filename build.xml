<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project name="mobile-net" basedir="." default="run">
	<!-- shouldn't this property be in build.properties? -rodrigo --> 
	<property name="server" value="cluster.rnl.ist.utl.pt"/>
	
  <!-- ====================================================== -->
  <!-- Load all the default properties, and any the user wants-->
  <!-- ====================================================== -->
  <property file="${user.home}/build.properties" />
  <property file="${basedir}/build.properties" />

  <property name="Name" value="Mobile-Net"/>
  <property name="name" value="mobile-net"/>
  <property name="final.name" value="${name}-${version}"/>
  <property name="test.final.name" value="${name}-test-${version}"/>
	
  <property name="src.dir" value="${workspace}/src"/>  	
  <property name="prj.src.dir" value="${src.dir}/project"/>
  <property name="mapred.src.dir" value="${prj.src.dir}/mapred"/>
	
	<!-- i don't think we're going to use this dir. -rodrigo -->
  <property name="hdfs.src.dir" value="${prj.src.dir}/hdfs"/>
  
	<!-- shouldn't this property be in build.properties? -rodrigo -->
  <property name="hdfs_base_dir" value="/tmp/${username}/${ant.project.name}" />
  
  <property name="build.dir" value="${basedir}/build"/>
  <property name="conf.dir" value="${basedir}/conf"/>
  <property name="lib.dir" value="${basedir}/lib"/>
  <property name="build.classes" value="${build.dir}/classes"/>
  <property name="build.src" value="${build.dir}/src"/>
  
  <property name="build.encoding" value="UTF-8"/>
  
  <property name="javac.debug" value="on"/>
  <property name="javac.optimize" value="on"/>
  <property name="javac.deprecation" value="off"/>
  <property name="javac.version" value="1.7"/>
  <property name="javac.args" value=""/>
	<!-- this is really necessary? -rodrigo -->
  <property name="javac.args.warnings" value="-Xlint:unchecked"/>
  
  <!-- Use environment -->
  <property environment="env" />
	
	<!-- the normal classpath -->
  <path id="classpath">
    <pathelement location="${build.classes}"/>
    <path refid="src.lib.classpath"/>
  </path>

  <path id="src.lib.classpath">
    <fileset dir="${lib.dir}">
      <include name="**/*.jar" />
      <exclude name="**/excluded/" />
    </fileset>
  </path>
  
	
  <!-- ====================================================== -->
  <!-- Create needed directories                              -->
  <!-- ====================================================== -->
	<target name="init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.classes}"/>
		<!-- I think we're not gonna use this dir. -rodrigo -->
    <mkdir dir="${build.src}"/>
  </target>

  <!--import file="${test.src.dir}/additional_confs.xml"/-->

  <!-- ====================================================== -->
  <!-- Compile the Java files                                 -->
  <!-- ====================================================== -->
  
  <target name="compile-classes" depends="init" description="compile mobile-net classes">
    <!-- Compile Java files checking warnings -->
    <javac 
        encoding="${build.encoding}"
        srcdir="${mapred.src.dir}"
        includes="**/*.java"
        destdir="${build.classes}"
        debug="${javac.debug}"
        optimize="${javac.optimize}"
        target="${javac.version}"
        source="${javac.version}">
      <compilerarg line="${javac.args} ${javac.args.warnings}" />
      <classpath refid="classpath"/>
    </javac>
  </target>

	<!-- This is just an alias, why don't just keep one of them? -rodrigo -->
  <target name="compile"
					depends="compile-classes"
					description="Compile all project">
  </target>
  

  <!-- ================================================================== -->
  <!-- Make jar                                                           -->
  <!-- ================================================================== -->
  <target name="jar" depends="compile" description="Make jar">
    <tar compression="gzip" destfile="${build.classes}/bin.tgz">
      <tarfileset dir="bin" mode="755"/>
    </tar>
    <property name="jar.properties.list"
      value="log4j.properties, task-log4j.properties"/>
    <jar jarfile="${build.dir}/${final.name}.jar"
         basedir="${build.classes}">
      <manifest>
        <!--section name="pt/ulisboa"-->
          <attribute name="Implementation-Title" value="${Name}"/>
          <attribute name="Implementation-Version" value="${version}"/>
          <attribute name="Main-Class" value="${main-class}"/>
        <!--/section-->
      </manifest>
    </jar>
  </target>
	
	<target name="clean" description="Cleans the HDFS output directory for the project">
		<!-- Shouldn't we erase all .class files also? -rodrigo -->
		<delete file="${build.dir}/${final.name}.jar" />
		<antcall target="executeHadoopCommand">
				<param name="command"
					value="dfs -rmr ${hdfs_base_dir}/output" />
		</antcall>
	</target>
  
  
  <!-- ================================================================== -->
  <!-- Compile test code                                                  --> 
  <!-- ================================================================== -->
  
	
	
  <!-- ================================================================== -->
  <!-- Mobile-Net hadoop execution                                        -->
  <!-- ================================================================== -->
	<target name="test" description="test">
    	<antcall target="executeHadoopCommand">
        	<param name="command"
        		value="dfs" />
    	</antcall>
	</target>
    
	<target name="run" depends="clean,jar" description="Runs the project">
		<antcall target="executeHadoopCommand">
			<param name="command"
				value="jar ${build.dir}/${final.name}.jar ${hdfs_base_dir}/input ${hdfs_base_dir}/output" />
		</antcall>
	</target>
	
	<target name="showOutput" description="Shows the output of the job">
		<antcall target="executeHadoopCommand">
			<param name="command"
				value="dfs -cat ${hdfs_base_dir}/part-r-00000"/>
		</antcall>
	</target>
	
	<target name="executeHadoopCommand">
		<sshexec
			host="${server}"
			username="${username}"
			password="${password}"
			command="hadoop ${command}"
			failonerror="no"/>
	</target>
</project>
