<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project name="mobile-net" basedir="." default="run">

  <property environment="env"/>
	
  <!-- ====================================================== -->
  <!-- Load all the default properties, and any the user wants-->
  <!-- ====================================================== -->
  <property file="${user.home}/build.properties" />
  <property file="${basedir}/build.properties" />

  <property name="Name" value="Mobile-Net"/>
  <property name="name" value="mobile-net"/>
  <property name="final.name" value="${name}-${version}"/>
  <property name="test.final.name" value="${name}-test-${version}"/>
	<property name="main-class" value="project.mapred.Runner" />
	
  <property name="src.dir" value="${workspace}/src"/>  	
  <property name="prj.src.dir" value="${src.dir}/project"/>
  <property name="mapred.src.dir" value="${prj.src.dir}/mapred"/>
	
	<!-- shouldn't this property be in build.properties? -rodrigo -->
	<!-- since it depends on username and the rest must be like that I don't see that need. - Samuel -->
  <property name="hdfs_base_dir" value="/user/${username}/${ant.project.name}" />
  
  <property name="build.dir" value="${basedir}/build"/>
  <property name="conf.dir" value="${basedir}/conf"/>
  <property name="lib.dir" value="${basedir}/lib"/>
  <property name="build.classes" value="${build.dir}/classes"/>
  <property name="build.src" value="${build.dir}/src"/>
  
  <property name="build.encoding" value="UTF-8"/>
  
  <property name="javac.debug" value="on"/>
  <property name="javac.optimize" value="on"/>
  <property name="javac.deprecation" value="off"/>
  <property name="javac.args" value=""/>
	<!-- necessary to omit Xlint unecessary warnings. - samuel -->
  <property name="javac.args.warnings" value="-Xlint:unchecked"/>
  
  <!-- Use environment -->
  <property environment="env" />
	
	<!-- the normal classpath -->
  <path id="classpath">
    <pathelement location="${build.classes}"/>
    <path refid="src.lib.classpath"/>
  </path>

  <path id="src.lib.classpath">
    <fileset dir="${lib.dir}">
      <include name="**/*.jar" />
      <exclude name="**/excluded/" />
    </fileset>
  </path>
  
	
  <!-- ====================================================== -->
  <!-- Create needed directories                              -->
  <!-- ====================================================== -->
	<target name="init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.classes}"/>
  </target>

  <!--import file="${test.src.dir}/additional_confs.xml"/-->

  <!-- ====================================================== -->
  <!-- Compile the Java files                                 -->
  <!-- ====================================================== -->
  
  <target name="compile" depends="init" description="compile mobile-net classes">
    <!-- Compile Java files checking warnings -->
    <javac 
        encoding="${build.encoding}"
        srcdir="${mapred.src.dir}"
        includes="**/*.java"
        destdir="${build.classes}"
        debug="${javac.debug}"
        optimize="${javac.optimize}"
        target="${javac.version}"
        source="${javac.version}"
        deprecation="${javac.deprecation}"
        includeantruntime="false">
      <compilerarg line="${javac.args} ${javac.args.warnings}" />
      <classpath refid="classpath"/>
    </javac>
  	<unjar dest="${build.classes}">
  	  <patternset id="postgresql"> 
  	  	<include name="**/*.class" />
  	  </patternset>
  	  <fileset dir="${lib.dir}" includes="postgresql-9.3-1100.jdbc4.jar" />
  	</unjar>
  </target>

  <!-- ================================================================== -->
  <!-- Make jar                                                           -->
  <!-- ================================================================== -->
  <target name="jar" depends="compile" description="Make jar">
    <tar compression="gzip" destfile="${build.classes}/bin.tgz">
      <tarfileset dir="bin" mode="755"/>
    </tar>
    <property name="jar.properties.list"
      value="log4j.properties, task-log4j.properties"/>
    <jar jarfile="${build.dir}/${final.name}.jar"
         basedir="${build.classes}">
      <manifest>
        <!--section name="pt/ulisboa"-->
          <attribute name="Implementation-Title" value="${Name}"/>
          <attribute name="Implementation-Version" value="${version}"/>
          <attribute name="Main-Class" value="${main-class}"/>
        <!--/section-->
      </manifest>
    </jar>
  </target>
	
	<target name="clean-jar" description="Cleans generated jar for the project">
		<delete file="${build.dir}/${final.name}.jar" />
	</target>
	
	<target name="clean-hdfs" description="Cleans the HDFS output directory for the project">
		<antcall target="executeHadoopCommand">
				<param name="command"
					value="dfs -rmr ${hdfs_base_dir}/output" />
		</antcall>
	</target>
	
	<target name="clean" depends="clean-jar" description="Cleans build directory for the project">
		<delete dir="${build.classes}" includeEmptyDirs="true" followSymlinks="false" />
		<!-- I added the includeEmptyDirs so that we don't need to use execs here.
		     I also changed the dir to build.classes because the previous one was also deleting the jar. -rodrigo
		<exec executable="rm" outputproperty="os-name">
			<arg value="-r" />
			<arg value="${build.dir}" />
		</exec>-->
	</target>
	
	<target name="clean-all" depends="clean, clean-hdfs" description="Cleans all generated files for the project">
	</target>
  
  
  <!-- ================================================================== -->
  <!-- Compile test code                                                  --> 
  <!-- ================================================================== -->
  
	
	
  <!-- ================================================================== -->
  <!-- Mobile-Net hadoop execution                                        -->
  <!-- ================================================================== -->
	<target name="test" description="test">
    	<antcall target="executeHadoopCommand">
        	<param name="command" value="" />
    	</antcall>
	</target>
    
	<target name="run" depends="clean-all,jar" description="Runs the project">
		<scp 
			file="${build.dir}/${final.name}.jar" 
			todir="${username}:${password}@${server}:~/"/>
		<antcall target="executeHadoopCommand">
			<param name="command"
				value="jar ~/${final.name}.jar ${hdfs_base_dir}/input ${hdfs_base_dir}/output" />
		</antcall>
	</target>
	
	<target name="showOutput" description="Shows the output of the job">
		<antcall target="executeHadoopCommand">
			<param name="command"
				value="dfs -cat ${hdfs_base_dir}/output/*"/>
		</antcall>
	</target>
	
	<target name="executeHadoopCommand">
		<sshexec
			host="${server}"
			username="${username}"
			password="${password}"
			command="/opt/hadoop/bin/hadoop ${command}"
			failonerror="no"/>
	</target>
</project>

<!-- vim: set ff=unix tabstop=2 shiftwidth=2 expandtab autoindent number fileencoding=utf-8 noai : -->
